{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.jsx","containers/Checkout/ContactData/ContactData.jsx","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","validationError","className","ValidationError","isValid","shouldValidation","touched","push","Invalid","Valid","elementType","join","elementConfig","value","onChange","change","style","margin","options","map","option","key","displayValue","module","exports","CheckoutSummary","Burger","ingredients","Actions","Button","btnType","clicked","onCheckoutCancel","onCheckoutContinue","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","email","isEmail","street","zipCode","minLength","maxLength","isNumber","country","deliveryMethod","formIsValid","checkValidity","rules","errorsMsg","trim","length","test","handleChange","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","submitForm","e","a","preventDefault","formData","loading","order","userId","price","totalPrice","customer","onOrderHanlder","token","formElementArray","this","id","config","form","onSubmit","FormTitle","formElement","variant","disabled","Spinner","React","Component","connect","burgerBuilder","auth","dispatch","orderData","orderCreator","withErrorHanlder","axios","Checkout","checkoutCancelHandler","history","goBack","checkoutContinueHanlder","replace","checkoutSummary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.8232697b.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./Input.module.css\";\nconst Input = (props) => {\n  let inputElement = null;\n  let inputClasses = [classes.InputElement];\n  let validationError  = <p className={classes.ValidationError}>{props.validationError}</p>;\n  if(!props.isValid && props.shouldValidation && props.touched){\n    inputClasses.push(classes.Invalid);\n  }\n  if(props.isValid && props.shouldValidation && props.touched){\n    inputClasses.push(classes.Valid);\n  }\n  \n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n          style={validationError ? {margin : \"0\"} : {margin : \"1rem 0\"}}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}        \n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.change}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n  }  \n  return <div className={classes.Input}>\n    {inputElement}\n    {validationError}\n    </div>;\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"Valid\":\"Input_Valid__TNEQR\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"CheckoutSummary_Burger__1wJm6\",\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"FormTitle\":\"ContactData_FormTitle__2PpUu\"};","import React from \"react\";\nimport classes from \"./CheckoutSummary.module.css\";\nimport  Button from \"../../UI/Button/Button\";\nimport Burger from \"../../Burger/Burger\";\nconst CheckoutSummary = props => {\n  return(\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it taste well!</h1>\n      <div className={classes.Burger}>\n        <Burger ingredients={props.ingredients}/>\n      </div>\n      <div className={classes.Actions}>\n        <Button btnType=\"danger\" clicked={props.onCheckoutCancel}>CANCEL</Button>\n        <Button btnType=\"success\" clicked={props.onCheckoutContinue}>CONTINUE</Button>\n      </div>\n     \n    </div>\n  )\n}\n\nexport default CheckoutSummary;","import React from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport {connect} from \"react-redux\";\nimport * as orderCreator from \"../../../store/actions/index\";\nimport withErrorHanlder from \"../../../hoc/withErrorHandler/withErrorHandler\";\nclass ContactData extends React.Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your name\",\n        },\n        value: \"\",\n        validation : {\n          required : true \n        },\n        valid : false ,\n        touched: false,\n        validationError : \"\"\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation : {\n          required : true,\n          isEmail : true\n        },\n        valid : false ,\n        touched: false,\n        validationError : \"\"\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation : {\n          required : true \n        },\n        valid : false ,\n        touched: false,\n        validationError : \"\"\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\",\n        },\n        value: \"\",\n        validation : {\n          required : true ,\n          minLength : 5,\n          maxLength : 5,\n          isNumber : true\n        },\n        valid : false ,\n        touched: false,\n        validationError : \"\"\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation : {\n          required : true \n        },\n        valid : false ,\n        touched: false,\n        validationError : \"\"\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"normal\", displayValue: \"Normal\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\n          ]\n        },\n        value: \"fastest\"  ,\n        valid : true      \n      },\n    },  \n    formIsValid : false\n  };\n\n  checkValidity = (value, rules ) => {\n    if(!rules){\n      return {isValid : true , errorsMsg : \"\" }\n    }\n    let isValid = true ; \n    let errorsMsg = [];\n   \n    if(rules.required){\n      isValid = value.trim() != \"\" && isValid;\n      if(!isValid){\n        errorsMsg.push(\"This field is required\");\n      }     \n    }   \n    if(rules.maxLength){\n      isValid = value.length <= rules.maxLength && isValid;\n      if(!isValid){\n        errorsMsg.push(`At most ${rules.maxLength} characters`)\n      }     \n    }\n    if(rules.minLength){\n      isValid = value.length >= rules.minLength && isValid;\n      if(!isValid){\n        errorsMsg.push(`At least ${rules.maxLength} characters`)\n      }      \n    }    \n    if(rules.isEmail){\n      const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      isValid = pattern.test(value) && isValid;\n      if(!isValid){\n        errorsMsg.push(\"Invalid email\");\n      }\n    }\n\n    if(rules.isNumber){\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n      if(!isValid){\n        errorsMsg.push(\"ZipCode must be number type\");\n      }\n    }\n    \n    return {isValid , errorsMsg : errorsMsg.join(\", \") } ; \n  }\n\n  handleChange = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm,\n    };\n    const updatedFormElement = {\n      ...this.state.orderForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;  \n    updatedFormElement.valid = this.checkValidity(event.target.value, updatedFormElement.validation).isValid;\n    updatedFormElement.touched = true ; \n    updatedFormElement.validationError =this.checkValidity(event.target.value, updatedFormElement.validation).errorsMsg;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true ; \n    for(let inputIdentifier in updatedOrderForm){     \n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid ;\n    }\n    \n    this.setState({ orderForm: updatedOrderForm, formIsValid : formIsValid });\n  };\n\n  submitForm = async (e) => {\n    e.preventDefault();\n    if(!this.state.formIsValid){\n      return;\n    }\n    const formData = {};\n    this.setState({ loading: true });\n    for(let key in this.state.orderForm){\n      formData[key] = this.state.orderForm[key].value;\n    }\n    const order ={\n      userId : this.props.userId,\n      ingredients : this.props.ingredients,\n      price : this.props.totalPrice,\n      customer : formData \n    }\n    \n    await this.props.onOrderHanlder(order, this.props.token) ;           \n   \n   \n  };\n\n  render() {\n    let formElementArray = [];\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.submitForm}>\n        <h4 className={classes.FormTitle}>Enter your contact Data</h4>\n        {formElementArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            change={(e) => this.handleChange(e, formElement.id)}\n            shouldValidation={formElement.config.validation}\n            touched={formElement.config.touched}\n            validationError={formElement.config.validationError}\n            isValid={formElement.config.valid}\n          />\n        ))}\n        <Button btnType=\"Success\" variant=\"outlined\" disabled={!this.state.formIsValid}>\n          Order\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return <div className={classes.ContactData}>{form}</div>;\n  }\n}\n\nconst  mapStateToProps = state => ({\n  ingredients : state.burgerBuilder.ingredients,\n  totalPrice : state.burgerBuilder.totalPrice,\n  loading : state.order.loading,\n  token : state.auth.token,\n  userId : state.auth.userId \n});\n\nconst mapDispatchToProps = dispatch => ({\n  onOrderHanlder : (orderData, token)  => {\n    dispatch(orderCreator.orderBurger(orderData, token))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHanlder(ContactData,axios));\n","import React from \"react\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass Checkout extends React.Component {\n  checkoutCancelHandler = () => {\n    this.props.history.goBack();\n  };\n  checkoutContinueHanlder = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n  render() {\n    let checkoutSummary = <Redirect to=\"/\" />;\n    if (this.props.ingredients) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      checkoutSummary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ingredients}\n            onCheckoutCancel={this.checkoutCancelHandler}\n            onCheckoutContinue={this.checkoutContinueHanlder}\n          />\n          <Route\n            path={`${this.props.match.path}/contact-data`}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return checkoutSummary;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ingredients: state.burgerBuilder.ingredients,\n  totalPrice: state.burgerBuilder.totalPrice,\n  purchased: state.order.purchased,\n});\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}